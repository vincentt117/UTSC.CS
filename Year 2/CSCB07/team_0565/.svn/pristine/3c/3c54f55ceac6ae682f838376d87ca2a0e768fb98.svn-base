package backend;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;

/**
 * A class that represents an <code> Account </code>.
 * 
 * @author Mandy
 *
 */
public abstract class Account {
  
  private String email;
  private String firstName;
  private String lastName;
  private String password;
  
  /**
   * Creates a new instance of <code> Account </code>.
   * 
   * @param email
   * @param firstName
   * @param lastName
   * @param password
   */
  public Account(String email, String firstName, String lastName, String password) {
    this.email = email;
    this.firstName = firstName;
    this.lastName = lastName;
    this.password = password;
  }
  
  // public List<Itinerary> SearchItinerary() 
  // implement search Itinerary method here 

	/**
	 * @return the email
	 */
	public String getEmail() {
		return email;
	}

	/**
	 * @param email the email to set
	 */
	public void setEmail(String email) {
		this.email = email;
	}

	/**
	 * @return the firstName
	 */
	public String getFirstName() {
		return firstName;
	}

	/**
	 * @param firstName the firstName to set
	 */
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	/**
	 * @return the lastName
	 */
	public String getLastName() {
		return lastName;
	}

	/**
	 * @param lastName the lastName to set
	 */
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	
	/**
	 * Returns a list of <code>Itinerary</code> based on the 
	 * @param origin  The starting location
	 * @param destination  The ending location
	 * @param departureDate Day to leave
	 * @return
	 */
	public ArrayList<Itinerary> searchItinerary(String origin, String destination, Date departureDate){
		// Return array list
		ArrayList<Itinerary> retItineraries = new ArrayList<Itinerary>();
		// Flight database
		HashMap<String, Flight> flightList = new FlightDatabase(System.getProperty("user.dir")).deserialize();
		// A HashMap of all flights, if a flight has already been used on path, it should not appear again on that path (if it
		// does, then the flight is circular)
		HashMap<Flight,Boolean> seenFlights = new HashMap<Flight,Boolean>();
		for(Flight flightNum: flightList.values()){
			seenFlights.put(flightNum, false);
		}
		// Recursively determine itineraries via helper		
		
		return retItineraries;
	}
	/**
	 * Helper recursive function for retrieving list of itineraries
	 * @param origin  The starting location
	 * @param destination  The ending location
	 * @param departureDate Day to leave
	 * @param flightList Collection of all flights
	 * @param seenFlights Collection of flights considered
	 * @param retItineraries Collection of valid itineraries
	 * @return
	 */
	private ArrayList<Itinerary> searchItineraryHelper(String origin, String destination, Date departureDate, HashMap<String, Flight> flightList, HashMap<Flight,Boolean> seenFlights, ArrayList<Itinerary> retItineraries){
		// Base case: All flights which fit the requirements exactly
		ArrayList<Trip> temp = new ArrayList<Trip>();
		for(Flight flight: flightList.values()){
			if(flight.getOrigin() == origin && flight.getDestination() == destination && flight.getDepartureTime() == departureDate){
				temp.add(flight);
				retItineraries.add(new Itinerary(temp));
				temp.clear();
			}
		}
		
		
		
		return null;
	}
	  
	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */	
	@Override
	public String toString() {
		return "Account [email=" + email + ", firstName=" + firstName + ", lastName=" 
	            + lastName +"]";
	}

}
